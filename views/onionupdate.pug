extends layout
 
block content
  h1= title

  -let items = results
  div(class="container_fluid")
    div(class="row")
    each item in items 
      div(class="row-sm-2",class="m-1")Item{item.onion_color}(#{itme.size}) is #{item.cost}
  div(class="container-fluid")
    div(class="row m-1")
      each item in items 
        - let destination = `dispatch(\"/onion/update?id=${item._id}\")`
        div(class="row-sm-2", class="m-1") Item #{item.onion_color}(#{item.size}) is #{item.cost}
          button.btn( class="btn-primary ml-1", onclick= destination) Update
  
  script.
    function dispatch(path){
      window.location.href=path
    }
 
  - let onionid = toShow._id
  - let onion_color = toShow.onion_color
  - let onioncost = toShow.cost
  - let oninosize = toShow.size
  
  div.row(class='mb-2')
    div.mr-1 ID is
    div #{onionid}
  - let actionid = "/resource/onion/" + onionid
  form(id='OnionForm', action="/resource/onion", method="POST")
    div.form-group
        label.onionAttr(for='costume_type') Onion Color
        input#onion_color(type='text', name='onion_type')
    div.form-group
        label.onionAttr(for='size') Onion size
        input#size(type='text', name='size')
    div.form-group
        label.onionAttr(for='cost') Onion cost
        input#cost(type='number', name='cost')
    input(type="submit")
 
  script.
    document.forms['OnionForm'].addEventListener('submit', (event) => {
      event.preventDefault();
      // TODO do something here to show user that form is being submitted
      fetch(event.target.action, {
        method: 'PUT',
        body: new URLSearchParams(new FormData(event.target)) // event.target is the form
      }).then((resp) => {
        return resp.json(); // or resp.text() or whatever the server sends
      }).then((body) => {
        alert("Update succeded")
        // TODO handle body
      }).catch((error) => {
        // TODO handle error
        alert("Update failed " + error )
      });
    }); 

